// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT EXISTS (
    SELECT 1
    FROM users u
    WHERE u.deleted_at IS NULL
      AND (
          ($1::text IS NOT NULL AND $1 != '' AND email_hash = $1)
          OR ($2::text IS NOT NULL AND $2 != '' AND username = $2)
      )
) AS exists
`

type CheckUserExistsParams struct {
	EmailHash string `db:"email_hash" json:"email_hash"`
	Username  string `db:"username" json:"username"`
}

func (q *Queries) CheckUserExists(ctx context.Context, arg CheckUserExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExists, arg.EmailHash, arg.Username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email_hash,
    email_enc,
    fullname_hash,
    fullname_enc,
    username,
    password_hash,
    phone_hash,
    phone_enc,
    role_id
)
VALUES (
    $1::text,
    $2,
    $3::text,
    $4,
    $5,
    $6::text,
    $7::text,
    $8,
    $9::uuid
) RETURNING id
`

type CreateUserParams struct {
	EmailHash    string    `db:"email_hash" json:"email_hash"`
	EmailEnc     []byte    `db:"email_enc" json:"email_enc"`
	FullnameHash string    `db:"fullname_hash" json:"fullname_hash"`
	FullnameEnc  []byte    `db:"fullname_enc" json:"fullname_enc"`
	Username     string    `db:"username" json:"username"`
	PasswordHash string    `db:"password_hash" json:"password_hash"`
	PhoneHash    string    `db:"phone_hash" json:"phone_hash"`
	PhoneEnc     []byte    `db:"phone_enc" json:"phone_enc"`
	RoleID       uuid.UUID `db:"role_id" json:"role_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.EmailHash,
		arg.EmailEnc,
		arg.FullnameHash,
		arg.FullnameEnc,
		arg.Username,
		arg.PasswordHash,
		arg.PhoneHash,
		arg.PhoneEnc,
		arg.RoleID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET 
    deleted_at = CURRENT_TIMESTAMP,
    deleted_by = $1::uuid
WHERE id = $2
`

type DeleteUserParams struct {
	DeletedBy uuid.UUID `db:"deleted_by" json:"deleted_by"`
	ID        uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.Exec(ctx, deleteUser, arg.DeletedBy, arg.ID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    u.id,
    u.username,
    u.email_enc AS email,
    u.fullname_enc AS fullname,
    u.phone_enc AS phone,
    r.name AS role_name,
    u.credibility_score,
    u.status,
    u.created_at,
    u.last_updated_at AS updated_at
FROM users u
LEFT JOIN roles r ON u.role_id = r.id AND r.deleted_at IS NULL
WHERE u.email_hash = $1
  AND u.deleted_at IS NULL
LIMIT 1
`

type GetUserByEmailRow struct {
	ID               uuid.UUID          `db:"id" json:"id"`
	Username         string             `db:"username" json:"username"`
	Email            []byte             `db:"email" json:"email"`
	Fullname         []byte             `db:"fullname" json:"fullname"`
	Phone            []byte             `db:"phone" json:"phone"`
	RoleName         pgtype.Text        `db:"role_name" json:"role_name"`
	CredibilityScore pgtype.Int2        `db:"credibility_score" json:"credibility_score"`
	Status           pgtype.Text        `db:"status" json:"status"`
	CreatedAt        pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, emailHash string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, emailHash)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Fullname,
		&i.Phone,
		&i.RoleName,
		&i.CredibilityScore,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
    u.id,
    u.username,
    u.email_enc AS email,
    u.fullname_enc AS fullname,
    u.phone_enc AS phone,
    r.name AS role_name,
    u.credibility_score,
    u.status,
    u.is_email_verified,
    u.is_phone_verified,
    u.last_login_at,
    u.created_at,
    u.last_updated_at AS updated_at
FROM users u
LEFT JOIN roles r ON u.role_id = r.id AND r.deleted_at IS NULL
WHERE u.id = $1
  AND u.deleted_at IS NULL
LIMIT 1
`

type GetUserByIDRow struct {
	ID               uuid.UUID          `db:"id" json:"id"`
	Username         string             `db:"username" json:"username"`
	Email            []byte             `db:"email" json:"email"`
	Fullname         []byte             `db:"fullname" json:"fullname"`
	Phone            []byte             `db:"phone" json:"phone"`
	RoleName         pgtype.Text        `db:"role_name" json:"role_name"`
	CredibilityScore pgtype.Int2        `db:"credibility_score" json:"credibility_score"`
	Status           pgtype.Text        `db:"status" json:"status"`
	IsEmailVerified  pgtype.Bool        `db:"is_email_verified" json:"is_email_verified"`
	IsPhoneVerified  pgtype.Bool        `db:"is_phone_verified" json:"is_phone_verified"`
	LastLoginAt      pgtype.Timestamptz `db:"last_login_at" json:"last_login_at"`
	CreatedAt        pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Fullname,
		&i.Phone,
		&i.RoleName,
		&i.CredibilityScore,
		&i.Status,
		&i.IsEmailVerified,
		&i.IsPhoneVerified,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByIdentifier = `-- name: GetUserByIdentifier :one
SELECT
    u.id,
    u.username,
    u.email_enc AS email,
    u.fullname_enc AS fullname,
    u.phone_enc AS phone,
    r.name AS role_name,
    u.credibility_score,
    u.status,
    u.password_hash,
    u.auth_provider,
    u.oauth_id,
    u.locked_until,
    u.failed_login_attempts,
    u.created_at,
    u.last_updated_at AS updated_at
FROM users u
LEFT JOIN roles r ON u.role_id = r.id AND r.deleted_at IS NULL
WHERE u.deleted_at IS NULL
  AND (
      u.id = $1
      OR (NULLIF($2, '') IS NOT NULL AND u.email_hash = $2)
      OR (NULLIF($3, '') IS NOT NULL AND u.username = $3)
  )
LIMIT 1
`

type GetUserByIdentifierParams struct {
	ID        uuid.UUID   `db:"id" json:"id"`
	EmailHash interface{} `db:"email_hash" json:"email_hash"`
	Username  interface{} `db:"username" json:"username"`
}

type GetUserByIdentifierRow struct {
	ID                  uuid.UUID          `db:"id" json:"id"`
	Username            string             `db:"username" json:"username"`
	Email               []byte             `db:"email" json:"email"`
	Fullname            []byte             `db:"fullname" json:"fullname"`
	Phone               []byte             `db:"phone" json:"phone"`
	RoleName            pgtype.Text        `db:"role_name" json:"role_name"`
	CredibilityScore    pgtype.Int2        `db:"credibility_score" json:"credibility_score"`
	Status              pgtype.Text        `db:"status" json:"status"`
	PasswordHash        pgtype.Text        `db:"password_hash" json:"password_hash"`
	AuthProvider        pgtype.Text        `db:"auth_provider" json:"auth_provider"`
	OauthID             pgtype.Text        `db:"oauth_id" json:"oauth_id"`
	LockedUntil         pgtype.Timestamptz `db:"locked_until" json:"locked_until"`
	FailedLoginAttempts pgtype.Int4        `db:"failed_login_attempts" json:"failed_login_attempts"`
	CreatedAt           pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUserByIdentifier(ctx context.Context, arg GetUserByIdentifierParams) (GetUserByIdentifierRow, error) {
	row := q.db.QueryRow(ctx, getUserByIdentifier, arg.ID, arg.EmailHash, arg.Username)
	var i GetUserByIdentifierRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Fullname,
		&i.Phone,
		&i.RoleName,
		&i.CredibilityScore,
		&i.Status,
		&i.PasswordHash,
		&i.AuthProvider,
		&i.OauthID,
		&i.LockedUntil,
		&i.FailedLoginAttempts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT
    u.id,
    u.email_enc AS email,
    u.fullname_enc AS fullname,
    u.phone_enc AS phone,
    u.username,
    r.name AS role_name,
    u.credibility_score,
    u.status,
    u.is_email_verified,
    u.is_phone_verified,
    u.last_login_at,
    u.created_at,
    u.last_updated_at AS updated_at
FROM users u
LEFT JOIN roles r ON u.role_id = r.id AND r.deleted_at IS NULL
WHERE u.deleted_at IS NULL
ORDER BY u.created_at DESC
OFFSET $1 LIMIT $2
`

type GetUsersParams struct {
	OffsetCount int32 `db:"offset_count" json:"offset_count"`
	LimitCount  int32 `db:"limit_count" json:"limit_count"`
}

type GetUsersRow struct {
	ID               uuid.UUID          `db:"id" json:"id"`
	Email            []byte             `db:"email" json:"email"`
	Fullname         []byte             `db:"fullname" json:"fullname"`
	Phone            []byte             `db:"phone" json:"phone"`
	Username         string             `db:"username" json:"username"`
	RoleName         pgtype.Text        `db:"role_name" json:"role_name"`
	CredibilityScore pgtype.Int2        `db:"credibility_score" json:"credibility_score"`
	Status           pgtype.Text        `db:"status" json:"status"`
	IsEmailVerified  pgtype.Bool        `db:"is_email_verified" json:"is_email_verified"`
	IsPhoneVerified  pgtype.Bool        `db:"is_phone_verified" json:"is_phone_verified"`
	LastLoginAt      pgtype.Timestamptz `db:"last_login_at" json:"last_login_at"`
	CreatedAt        pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.OffsetCount, arg.LimitCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersRow{}
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Fullname,
			&i.Phone,
			&i.Username,
			&i.RoleName,
			&i.CredibilityScore,
			&i.Status,
			&i.IsEmailVerified,
			&i.IsPhoneVerified,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementFailedLoginCount = `-- name: IncrementFailedLoginCount :exec
UPDATE users
SET failed_login_attempts = failed_login_attempts + 1
WHERE id = $1
`

func (q *Queries) IncrementFailedLoginCount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, incrementFailedLoginCount, id)
	return err
}

const lockUser = `-- name: LockUser :exec
UPDATE users
SET 
    locked_until = $1::timestamptz,
    failed_login_attempts = $2::int
WHERE id = $3
`

type LockUserParams struct {
	LockedUntil    time.Time `db:"locked_until" json:"locked_until"`
	FailedAttempts int32     `db:"failed_attempts" json:"failed_attempts"`
	ID             uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) LockUser(ctx context.Context, arg LockUserParams) error {
	_, err := q.db.Exec(ctx, lockUser, arg.LockedUntil, arg.FailedAttempts, arg.ID)
	return err
}

const resetFailedLoginCount = `-- name: ResetFailedLoginCount :exec
UPDATE users
SET 
    failed_login_attempts = 0,
    locked_until = NULL
WHERE id = $1
`

func (q *Queries) ResetFailedLoginCount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, resetFailedLoginCount, id)
	return err
}

const restoreUser = `-- name: RestoreUser :exec
UPDATE users
SET 
    deleted_at = NULL,
    deleted_by = NULL
WHERE id = $1
`

func (q *Queries) RestoreUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, restoreUser, id)
	return err
}

const searchUser = `-- name: SearchUser :many
SELECT
    u.id,
    u.username,
    u.email_enc AS email,
    u.fullname_enc AS fullname,
    u.phone_enc AS phone,
    r.name AS role_name,
    u.credibility_score,
    u.status,
    u.is_email_verified,
    u.is_phone_verified,
    u.last_login_at,
    u.created_at,
    u.last_updated_at AS updated_at
FROM users u
LEFT JOIN roles r ON u.role_id = r.id AND r.deleted_at IS NULL
WHERE u.deleted_at IS NULL
  AND (
      u.id = $1
      OR u.username ILIKE '%' || $2::text || '%'
  )
ORDER BY u.created_at DESC
OFFSET $3 LIMIT $4
`

type SearchUserParams struct {
	ID          uuid.UUID `db:"id" json:"id"`
	Query       string    `db:"query" json:"query"`
	OffsetCount int32     `db:"offset_count" json:"offset_count"`
	LimitCount  int32     `db:"limit_count" json:"limit_count"`
}

type SearchUserRow struct {
	ID               uuid.UUID          `db:"id" json:"id"`
	Username         string             `db:"username" json:"username"`
	Email            []byte             `db:"email" json:"email"`
	Fullname         []byte             `db:"fullname" json:"fullname"`
	Phone            []byte             `db:"phone" json:"phone"`
	RoleName         pgtype.Text        `db:"role_name" json:"role_name"`
	CredibilityScore pgtype.Int2        `db:"credibility_score" json:"credibility_score"`
	Status           pgtype.Text        `db:"status" json:"status"`
	IsEmailVerified  pgtype.Bool        `db:"is_email_verified" json:"is_email_verified"`
	IsPhoneVerified  pgtype.Bool        `db:"is_phone_verified" json:"is_phone_verified"`
	LastLoginAt      pgtype.Timestamptz `db:"last_login_at" json:"last_login_at"`
	CreatedAt        pgtype.Timestamptz `db:"created_at" json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) SearchUser(ctx context.Context, arg SearchUserParams) ([]SearchUserRow, error) {
	rows, err := q.db.Query(ctx, searchUser,
		arg.ID,
		arg.Query,
		arg.OffsetCount,
		arg.LimitCount,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchUserRow{}
	for rows.Next() {
		var i SearchUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Fullname,
			&i.Phone,
			&i.RoleName,
			&i.CredibilityScore,
			&i.Status,
			&i.IsEmailVerified,
			&i.IsPhoneVerified,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE users
SET last_login_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) UpdateLastLogin(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateLastLogin, id)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET
    username = CASE
        WHEN $1::text IS NOT NULL
            AND $1::text != ''
            AND $1::text != username
        THEN $1::text
        ELSE username
    END,
    email_hash = CASE
        WHEN $2::text IS NOT NULL
            AND $2::text != ''
            AND $2::text != email_hash
        THEN $2::text
        ELSE email_hash
    END,
    email_enc = CASE
        WHEN $3::bytea IS NOT NULL
            AND $3::bytea != email_enc
        THEN $3::bytea
        ELSE email_enc
    END,
    fullname_hash = CASE
        WHEN $4::text IS NOT NULL
            AND $4::text != ''
            AND $4::text != fullname_hash
        THEN $4::text
        ELSE fullname_hash
    END,
    fullname_enc = CASE
        WHEN $5::bytea IS NOT NULL
            AND $5::bytea != fullname_enc
        THEN $5::bytea
        ELSE fullname_enc
    END,
    phone_hash = CASE
        WHEN $6::text IS NOT NULL
            AND $6::text != ''
            AND $6::text != phone_hash
        THEN $6::text
        ELSE phone_hash
    END,
    phone_enc = CASE
        WHEN $7::bytea IS NOT NULL
            AND $7::bytea != phone_enc
        THEN $7::bytea
        ELSE phone_enc
    END,
    status = CASE
        WHEN $8::text IS NOT NULL
            AND $8::text != ''
            AND $8::text != status
        THEN $8::text
        ELSE status
    END,
    credibility_score = CASE
        WHEN $9::smallint IS NOT NULL
            AND $9::smallint != credibility_score
        THEN $9::smallint
        ELSE credibility_score
    END,
    last_updated_at = CASE
        WHEN (
            ($1::text IS NOT NULL AND $1::text != '' AND $1::text != username)
            OR ($2::text IS NOT NULL AND $2::text != '' AND $2::text != email_hash)
            OR ($3::bytea IS NOT NULL AND $3::bytea != email_enc)
            OR ($4::text IS NOT NULL AND $4::text != '' AND $4::text != fullname_hash)
            OR ($5::bytea IS NOT NULL AND $5::bytea != fullname_enc)
            OR ($6::text IS NOT NULL AND $6::text != '' AND $6::text != phone_hash)
            OR ($7::bytea IS NOT NULL AND $7::bytea != phone_enc)
            OR ($8::text IS NOT NULL AND $8::text != '' AND $8::text != status)
            OR ($9::smallint IS NOT NULL AND $9::smallint != credibility_score)
        ) THEN CURRENT_TIMESTAMP
        ELSE last_updated_at
    END,
    last_updated_by = $10::uuid
WHERE id = $11
`

type UpdateUserParams struct {
	Username         string    `db:"username" json:"username"`
	EmailHash        string    `db:"email_hash" json:"email_hash"`
	EmailEnc         []byte    `db:"email_enc" json:"email_enc"`
	FullnameHash     string    `db:"fullname_hash" json:"fullname_hash"`
	FullnameEnc      []byte    `db:"fullname_enc" json:"fullname_enc"`
	PhoneHash        string    `db:"phone_hash" json:"phone_hash"`
	PhoneEnc         []byte    `db:"phone_enc" json:"phone_enc"`
	Status           string    `db:"status" json:"status"`
	CredibilityScore int16     `db:"credibility_score" json:"credibility_score"`
	UpdatedBy        uuid.UUID `db:"updated_by" json:"updated_by"`
	ID               uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Username,
		arg.EmailHash,
		arg.EmailEnc,
		arg.FullnameHash,
		arg.FullnameEnc,
		arg.PhoneHash,
		arg.PhoneEnc,
		arg.Status,
		arg.CredibilityScore,
		arg.UpdatedBy,
		arg.ID,
	)
	return err
}
