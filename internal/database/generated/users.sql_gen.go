// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkUserExists = `-- name: CheckUserExists :one
SELECT EXISTS(
    SELECT 1
    FROM users
    WHERE 
        (
            $1::text IS NOT NULL
            AND pgp_sym_decrypt(email, $2::text) = $1::text
        )
        OR (
            $3::text IS NOT NULL
            AND username = $3::text
        )
) AS exists
`

type CheckUserExistsParams struct {
	Email    string `db:"email" json:"email"`
	Key      string `db:"key" json:"key"`
	Username string `db:"username" json:"username"`
}

func (q *Queries) CheckUserExists(ctx context.Context, arg CheckUserExistsParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkUserExists, arg.Email, arg.Key, arg.Username)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    email,
    full_name,
    username,
    password_hash,
    phone_number,
    role
)
VALUES (
    pgp_sym_encrypt($1::text, $2::text),
    pgp_sym_encrypt($3::text, $2::text),
    $4::text,
    $5::text,
    pgp_sym_encrypt($6::text, $2::text),
    $7::text
)
RETURNING 
    id,
    pgp_sym_decrypt(email, $2::text) AS email,
    pgp_sym_decrypt(full_name, $2::text) AS full_name,
    pgp_sym_decrypt(phone_number, $2::text) AS phone_number,
    role,
    credibility_score,
    status,
    created_at,
    updated_at
`

type CreateUserParams struct {
	Email        string `db:"email" json:"email"`
	Key          string `db:"key" json:"key"`
	FullName     string `db:"full_name" json:"full_name"`
	Username     string `db:"username" json:"username"`
	PasswordHash string `db:"password_hash" json:"password_hash"`
	PhoneNumber  string `db:"phone_number" json:"phone_number"`
	Role         string `db:"role" json:"role"`
}

type CreateUserRow struct {
	ID               uuid.UUID          `db:"id" json:"id"`
	Email            string             `db:"email" json:"email"`
	FullName         string             `db:"full_name" json:"full_name"`
	PhoneNumber      string             `db:"phone_number" json:"phone_number"`
	Role             pgtype.Text        `db:"role" json:"role"`
	CredibilityScore pgtype.Int2        `db:"credibility_score" json:"credibility_score"`
	Status           pgtype.Text        `db:"status" json:"status"`
	CreatedAt        time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Key,
		arg.FullName,
		arg.Username,
		arg.PasswordHash,
		arg.PhoneNumber,
		arg.Role,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.PhoneNumber,
		&i.Role,
		&i.CredibilityScore,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users 
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = $1::uuid
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT 
    id,
    pgp_sym_decrypt(email, $1::text) AS email,
    pgp_sym_decrypt(full_name, $1::text) AS full_name,
    pgp_sym_decrypt(phone_number, $1::text) AS phone_number,
    role,
    credibility_score,
    status,
    created_at,
    updated_at
FROM users
WHERE pgp_sym_decrypt(email, $1::text) = $2::text
LIMIT 1
`

type GetUserByEmailParams struct {
	Key   string `db:"key" json:"key"`
	Email string `db:"email" json:"email"`
}

type GetUserByEmailRow struct {
	ID               uuid.UUID          `db:"id" json:"id"`
	Email            string             `db:"email" json:"email"`
	FullName         string             `db:"full_name" json:"full_name"`
	PhoneNumber      string             `db:"phone_number" json:"phone_number"`
	Role             pgtype.Text        `db:"role" json:"role"`
	CredibilityScore pgtype.Int2        `db:"credibility_score" json:"credibility_score"`
	Status           pgtype.Text        `db:"status" json:"status"`
	CreatedAt        time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, arg.Key, arg.Email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.PhoneNumber,
		&i.Role,
		&i.CredibilityScore,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT 
    id,
    pgp_sym_decrypt(email, $1::text) AS email,
    pgp_sym_decrypt(full_name, $1::text) AS full_name,
    pgp_sym_decrypt(phone_number, $1::text) AS phone_number,
    role,
    credibility_score,
    status,
    created_at,
    updated_at
FROM users
WHERE id = $2::uuid
LIMIT 1
`

type GetUserByIDParams struct {
	Key string    `db:"key" json:"key"`
	ID  uuid.UUID `db:"id" json:"id"`
}

type GetUserByIDRow struct {
	ID               uuid.UUID          `db:"id" json:"id"`
	Email            string             `db:"email" json:"email"`
	FullName         string             `db:"full_name" json:"full_name"`
	PhoneNumber      string             `db:"phone_number" json:"phone_number"`
	Role             pgtype.Text        `db:"role" json:"role"`
	CredibilityScore pgtype.Int2        `db:"credibility_score" json:"credibility_score"`
	Status           pgtype.Text        `db:"status" json:"status"`
	CreatedAt        time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, arg GetUserByIDParams) (GetUserByIDRow, error) {
	row := q.db.QueryRow(ctx, getUserByID, arg.Key, arg.ID)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.PhoneNumber,
		&i.Role,
		&i.CredibilityScore,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByIdentifier = `-- name: GetUserByIdentifier :one
SELECT 
    id,
    pgp_sym_decrypt(email, $1::text) AS email,
    pgp_sym_decrypt(full_name, $1::text) AS full_name,
    pgp_sym_decrypt(phone_number, $1::text) AS phone_number,
    username,
    role,
    credibility_score,
    status,
    password_hash,
    auth_provider,
    oauth_id,
    locked_until,
    failed_login_attempts,
    created_at,
    updated_at
FROM users
WHERE 
    (id = $2::uuid)
    OR (NULLIF($3::text, '') IS NOT NULL AND pgp_sym_decrypt(email, $1::text) = $3::text)
    OR (NULLIF($4::text, '') IS NOT NULL AND username = $4::text)
LIMIT 1
`

type GetUserByIdentifierParams struct {
	Key      string    `db:"key" json:"key"`
	ID       uuid.UUID `db:"id" json:"id"`
	Email    string    `db:"email" json:"email"`
	Username string    `db:"username" json:"username"`
}

type GetUserByIdentifierRow struct {
	ID                  uuid.UUID          `db:"id" json:"id"`
	Email               string             `db:"email" json:"email"`
	FullName            string             `db:"full_name" json:"full_name"`
	PhoneNumber         string             `db:"phone_number" json:"phone_number"`
	Username            string             `db:"username" json:"username"`
	Role                pgtype.Text        `db:"role" json:"role"`
	CredibilityScore    pgtype.Int2        `db:"credibility_score" json:"credibility_score"`
	Status              pgtype.Text        `db:"status" json:"status"`
	PasswordHash        pgtype.Text        `db:"password_hash" json:"password_hash"`
	AuthProvider        pgtype.Text        `db:"auth_provider" json:"auth_provider"`
	OauthID             pgtype.Text        `db:"oauth_id" json:"oauth_id"`
	LockedUntil         pgtype.Timestamptz `db:"locked_until" json:"locked_until"`
	FailedLoginAttempts pgtype.Int4        `db:"failed_login_attempts" json:"failed_login_attempts"`
	CreatedAt           time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUserByIdentifier(ctx context.Context, arg GetUserByIdentifierParams) (GetUserByIdentifierRow, error) {
	row := q.db.QueryRow(ctx, getUserByIdentifier,
		arg.Key,
		arg.ID,
		arg.Email,
		arg.Username,
	)
	var i GetUserByIdentifierRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FullName,
		&i.PhoneNumber,
		&i.Username,
		&i.Role,
		&i.CredibilityScore,
		&i.Status,
		&i.PasswordHash,
		&i.AuthProvider,
		&i.OauthID,
		&i.LockedUntil,
		&i.FailedLoginAttempts,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT 
    id,
    pgp_sym_decrypt(email, $1::text) AS email,
    pgp_sym_decrypt(full_name, $1::text) AS fullname,
    pgp_sym_decrypt(phone_number, $1::text) AS phone_number,
    username,
    role,
    credibility_score,
    status,
    is_email_verified, 
    is_phone_verified,
    last_login_at,
    created_at,
    updated_at
FROM users
WHERE deleted_at IS NULL 
ORDER BY created_at DESC
OFFSET $2 LIMIT $3
`

type GetUsersParams struct {
	Key         string `db:"key" json:"key"`
	OffsetCount int32  `db:"offset_count" json:"offset_count"`
	LimitCount  int32  `db:"limit_count" json:"limit_count"`
}

type GetUsersRow struct {
	ID               uuid.UUID          `db:"id" json:"id"`
	Email            string             `db:"email" json:"email"`
	Fullname         string             `db:"fullname" json:"fullname"`
	PhoneNumber      string             `db:"phone_number" json:"phone_number"`
	Username         string             `db:"username" json:"username"`
	Role             pgtype.Text        `db:"role" json:"role"`
	CredibilityScore pgtype.Int2        `db:"credibility_score" json:"credibility_score"`
	Status           pgtype.Text        `db:"status" json:"status"`
	IsEmailVerified  pgtype.Bool        `db:"is_email_verified" json:"is_email_verified"`
	IsPhoneVerified  pgtype.Bool        `db:"is_phone_verified" json:"is_phone_verified"`
	LastLoginAt      pgtype.Timestamptz `db:"last_login_at" json:"last_login_at"`
	CreatedAt        time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers, arg.Key, arg.OffsetCount, arg.LimitCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersRow{}
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Fullname,
			&i.PhoneNumber,
			&i.Username,
			&i.Role,
			&i.CredibilityScore,
			&i.Status,
			&i.IsEmailVerified,
			&i.IsPhoneVerified,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementFailedLoginCount = `-- name: IncrementFailedLoginCount :exec
UPDATE users 
SET failed_login_attempts = failed_login_attempts + 1
WHERE id = $1::uuid
`

func (q *Queries) IncrementFailedLoginCount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, incrementFailedLoginCount, id)
	return err
}

const restoreUser = `-- name: RestoreUser :exec
UPDATE users 
SET deleted_at = NULL
WHERE id = $1::uuid
`

func (q *Queries) RestoreUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, restoreUser, id)
	return err
}

const searchUser = `-- name: SearchUser :many
SELECT 
    id, 
    username,
    pgp_sym_decrypt(email, $1::text) AS email,
    pgp_sym_decrypt(full_name, $1::text) AS fullname,
    pgp_sym_decrypt(phone_number, $1::text) AS phone_number,
    role, 
    is_email_verified, 
    is_phone_verified,
    last_login_at, 
    created_at, 
    updated_at
FROM users 
WHERE deleted_at IS NULL
AND (
    id = $2::uuid OR
    username ILIKE '%' || $3::text || '%' OR
    pgp_sym_decrypt(email, $1::text) ILIKE '%' || $3::text || '%' OR
    pgp_sym_decrypt(full_name, $1::text) ILIKE '%' || $3::text || '%' OR
    pgp_sym_decrypt(phone_number, $1::text) ILIKE '%' || $3::text || '%'
)
OFFSET $4 LIMIT $5
`

type SearchUserParams struct {
	Key         string    `db:"key" json:"key"`
	ID          uuid.UUID `db:"id" json:"id"`
	Query       string    `db:"query" json:"query"`
	OffsetCount int32     `db:"offset_count" json:"offset_count"`
	LimitCount  int32     `db:"limit_count" json:"limit_count"`
}

type SearchUserRow struct {
	ID              uuid.UUID          `db:"id" json:"id"`
	Username        string             `db:"username" json:"username"`
	Email           string             `db:"email" json:"email"`
	Fullname        string             `db:"fullname" json:"fullname"`
	PhoneNumber     string             `db:"phone_number" json:"phone_number"`
	Role            pgtype.Text        `db:"role" json:"role"`
	IsEmailVerified pgtype.Bool        `db:"is_email_verified" json:"is_email_verified"`
	IsPhoneVerified pgtype.Bool        `db:"is_phone_verified" json:"is_phone_verified"`
	LastLoginAt     pgtype.Timestamptz `db:"last_login_at" json:"last_login_at"`
	CreatedAt       time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

func (q *Queries) SearchUser(ctx context.Context, arg SearchUserParams) ([]SearchUserRow, error) {
	rows, err := q.db.Query(ctx, searchUser,
		arg.Key,
		arg.ID,
		arg.Query,
		arg.OffsetCount,
		arg.LimitCount,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchUserRow{}
	for rows.Next() {
		var i SearchUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Fullname,
			&i.PhoneNumber,
			&i.Role,
			&i.IsEmailVerified,
			&i.IsPhoneVerified,
			&i.LastLoginAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLastLogin = `-- name: UpdateLastLogin :exec
UPDATE users 
SET last_login_at = NOW()
WHERE id = $1::uuid
`

func (q *Queries) UpdateLastLogin(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateLastLogin, id)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users 
SET 
    email = CASE 
        WHEN $1::text IS NOT NULL AND $1::text != '' 
        THEN pgp_sym_encrypt($1::text, $2::text)
        ELSE email 
    END,
    full_name = CASE
        WHEN $3::text IS NOT NULL AND $3::text != ''
        THEN pgp_sym_encrypt($3::text, $2::text)
        ELSE full_name
    END,
    phone_number = CASE
        WHEN $4::text IS NOT NULL AND $4::text != ''
        THEN pgp_sym_encrypt($4::text, $2::text)
        ELSE phone_number
    END,
    role = CASE 
        WHEN $5::text IS NOT NULL AND $5::text IN ('citizen', 'admin', 'superadmin') 
        THEN $5::text 
        ELSE role 
    END,
    status = CASE
        WHEN $6::text IS NOT NULL AND $6::text IN ('probation', 'regular', 'suspended')
        THEN $6::text
        ELSE status
    END,
    credibility_score = COALESCE($7::smallint, credibility_score),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $8::uuid
`

type UpdateUserParams struct {
	Email            string    `db:"email" json:"email"`
	Key              string    `db:"key" json:"key"`
	FullName         string    `db:"full_name" json:"full_name"`
	PhoneNumber      string    `db:"phone_number" json:"phone_number"`
	Role             string    `db:"role" json:"role"`
	Status           string    `db:"status" json:"status"`
	CredibilityScore int16     `db:"credibility_score" json:"credibility_score"`
	ID               uuid.UUID `db:"id" json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Email,
		arg.Key,
		arg.FullName,
		arg.PhoneNumber,
		arg.Role,
		arg.Status,
		arg.CredibilityScore,
		arg.ID,
	)
	return err
}
