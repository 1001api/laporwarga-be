// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user_roles.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUserRole = `-- name: CreateUserRole :exec
INSERT INTO user_roles (
    user_id,
    role_type,
    created_by
) VALUES (
    $1::uuid,
    $2,
    $3::uuid
) ON CONFLICT (user_id, role_type) DO NOTHING
`

type CreateUserRoleParams struct {
	UserID    uuid.UUID `db:"user_id" json:"user_id"`
	RoleType  string    `db:"role_type" json:"role_type"`
	CreatedBy uuid.UUID `db:"created_by" json:"created_by"`
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) error {
	_, err := q.db.Exec(ctx, createUserRole, arg.UserID, arg.RoleType, arg.CreatedBy)
	return err
}

const deleteUserRole = `-- name: DeleteUserRole :exec
UPDATE user_roles
SET
    deleted_at = NOW(),
    deleted_by = $1::uuid
WHERE user_id = $2::uuid
`

type DeleteUserRoleParams struct {
	DeletedBy uuid.UUID `db:"deleted_by" json:"deleted_by"`
	UserID    uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) DeleteUserRole(ctx context.Context, arg DeleteUserRoleParams) error {
	_, err := q.db.Exec(ctx, deleteUserRole, arg.DeletedBy, arg.UserID)
	return err
}

const getUserRoleByUserID = `-- name: GetUserRoleByUserID :one
SELECT id, user_id, role_type, created_at, created_by, last_updated_at, last_updated_by, deleted_at, deleted_by FROM user_roles
WHERE user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserRoleByUserID(ctx context.Context, userID uuid.UUID) (UserRole, error) {
	row := q.db.QueryRow(ctx, getUserRoleByUserID, userID)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleType,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.LastUpdatedAt,
		&i.LastUpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE user_roles
SET
    role_type = $1,
    last_updated_by = $2::uuid,
    last_updated_at = NOW()
WHERE user_id = $3::uuid
RETURNING id, user_id, role_type, created_at, created_by, last_updated_at, last_updated_by, deleted_at, deleted_by
`

type UpdateUserRoleParams struct {
	RoleType      string    `db:"role_type" json:"role_type"`
	LastUpdatedBy uuid.UUID `db:"last_updated_by" json:"last_updated_by"`
	UserID        uuid.UUID `db:"user_id" json:"user_id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, updateUserRole, arg.RoleType, arg.LastUpdatedBy, arg.UserID)
	var i UserRole
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RoleType,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.LastUpdatedAt,
		&i.LastUpdatedBy,
		&i.DeletedAt,
		&i.DeletedBy,
	)
	return i, err
}
