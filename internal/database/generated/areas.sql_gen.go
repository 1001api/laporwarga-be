// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: areas.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const checkAreaExist = `-- name: CheckAreaExist :one
SELECT id FROM areas WHERE name = $1 OR area_code = $2
`

type CheckAreaExistParams struct {
	Name     string `db:"name" json:"name"`
	AreaCode string `db:"area_code" json:"area_code"`
}

func (q *Queries) CheckAreaExist(ctx context.Context, arg CheckAreaExistParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, checkAreaExist, arg.Name, arg.AreaCode)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const createArea = `-- name: CreateArea :one
INSERT INTO areas (
    name,
    description,
    area_type,
    area_code,
    boundary
) VALUES (
    $1,
    $2,
    $3,
    $4,
    ST_SetSRID(
        ST_Multi(
            ST_CollectionExtract(
                ST_MakeValid(
                    ST_GeomFromGeoJSON($5::text)
                ),
                3 -- Extract only polygon/multipolygon
            )
        ), 
        4326
    )
) RETURNING id
`

type CreateAreaParams struct {
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
	AreaType    string      `db:"area_type" json:"area_type"`
	AreaCode    string      `db:"area_code" json:"area_code"`
	Boundary    string      `db:"boundary" json:"boundary"`
}

func (q *Queries) CreateArea(ctx context.Context, arg CreateAreaParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createArea,
		arg.Name,
		arg.Description,
		arg.AreaType,
		arg.AreaCode,
		arg.Boundary,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
