// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: audit_logs.sql

package db

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createAuditLog = `-- name: CreateAuditLog :exec
INSERT INTO audit_logs (
    entity_name,
    entity_id,
    action,
    metadata,
    performed_by
) VALUES (
    $1::text,
    $2::uuid,
    $3::text,
    $4::jsonb,
    $5::uuid
)
`

type CreateAuditLogParams struct {
	EntityName  string          `db:"entity_name" json:"entity_name"`
	EntityID    uuid.UUID       `db:"entity_id" json:"entity_id"`
	Action      string          `db:"action" json:"action"`
	Metadata    json.RawMessage `db:"metadata" json:"metadata"`
	PerformedBy uuid.UUID       `db:"performed_by" json:"performed_by"`
}

func (q *Queries) CreateAuditLog(ctx context.Context, arg CreateAuditLogParams) error {
	_, err := q.db.Exec(ctx, createAuditLog,
		arg.EntityName,
		arg.EntityID,
		arg.Action,
		arg.Metadata,
		arg.PerformedBy,
	)
	return err
}

const getAuditLogs = `-- name: GetAuditLogs :many
SELECT id, entity_name, entity_id, action, metadata, performed_by, created_at FROM audit_logs
ORDER BY created_at DESC
`

func (q *Queries) GetAuditLogs(ctx context.Context) ([]AuditLog, error) {
	rows, err := q.db.Query(ctx, getAuditLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AuditLog{}
	for rows.Next() {
		var i AuditLog
		if err := rows.Scan(
			&i.ID,
			&i.EntityName,
			&i.EntityID,
			&i.Action,
			&i.Metadata,
			&i.PerformedBy,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
